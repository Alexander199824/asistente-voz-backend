{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-02-25T15:04:31.783Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-25T15:04:32.715Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-25T15:04:33.094Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-02-25T15:04:33.224Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-02-26T18:12:58.566Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-26T18:12:59.797Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-26T18:12:59.907Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-02-26T18:12:59.958Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-02-27T16:29:44.633Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T16:29:45.679Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T16:29:45.785Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-02-27T16:29:45.840Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T16:49:34.298Z"}
{"duration":1115,"level":"info","message":"DB query ejecutada","rows":3,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-02-27T16:49:34.480Z"}
{"duration":232,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-02-27T16:49:34.715Z"}
{"duration":163,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-02-27T16:49:34.880Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-02-27T17:05:04.873Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T17:05:05.847Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T17:05:05.915Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-02-27T17:05:06.012Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T17:18:18.278Z"}
{"duration":1108,"level":"info","message":"DB query ejecutada","rows":3,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-02-27T17:18:18.443Z"}
{"duration":165,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-02-27T17:18:18.609Z"}
{"duration":164,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-02-27T17:18:18.774Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T17:38:16.853Z"}
{"duration":1073,"level":"info","message":"DB query ejecutada","rows":3,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-02-27T17:38:17.013Z"}
{"duration":159,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-02-27T17:38:17.173Z"}
{"duration":164,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-02-27T17:38:17.338Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-02-27T21:04:23.659Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:04:24.705Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:04:24.710Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-02-27T21:04:24.868Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:05:57.179Z"}
{"duration":1106,"level":"info","message":"DB query ejecutada","rows":3,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-02-27T21:05:57.349Z"}
{"duration":159,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-02-27T21:05:57.509Z"}
{"duration":173,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-02-27T21:05:57.684Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:09:20.845Z"}
{"duration":1048,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT id, username, email, password_hash, is_active, created_at, updated_at\n        FROM users\n        WHERE username = $1 OR email = $1;\n      ","timestamp":"2025-02-27T21:09:21.002Z"}
{"duration":154,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT id, username, email, password_hash, is_active, created_at, updated_at\n        FROM users\n        WHERE username = $1 OR email = $1;\n      ","timestamp":"2025-02-27T21:09:21.157Z"}
{"duration":153,"level":"info","message":"DB client query ejecutada","rows":null,"service":"database-service","text":"BEGIN","timestamp":"2025-02-27T21:09:21.313Z"}
{"duration":159,"level":"info","message":"DB client query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO users (username, email, password_hash)\n        VALUES ($1, $2, $3)\n        RETURNING id, username, email, is_active, created_at;\n      ","timestamp":"2025-02-27T21:09:21.548Z"}
{"duration":155,"level":"info","message":"DB client query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO user_preferences (user_id)\n        VALUES ($1)\n        RETURNING *;\n      ","timestamp":"2025-02-27T21:09:21.704Z"}
{"duration":158,"level":"info","message":"DB client query ejecutada","rows":null,"service":"database-service","text":"COMMIT","timestamp":"2025-02-27T21:09:21.864Z"}
{"level":"info","message":"Cliente de DB devuelto al pool","service":"database-service","timestamp":"2025-02-27T21:09:21.867Z"}
{"duration":201,"level":"info","message":"DB client query ejecutada","rows":1,"service":"database-service","text":"SELECT * FROM user_preferences WHERE user_id = $1","timestamp":"2025-02-27T21:09:22.074Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:21:48.581Z"}
{"duration":1406,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT id, username, email, password_hash, is_active, created_at, updated_at\n        FROM users\n        WHERE username = $1 OR email = $1;\n      ","timestamp":"2025-02-27T21:21:48.786Z"}
{"duration":252,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT * FROM user_preferences WHERE user_id = $1","timestamp":"2025-02-27T21:21:49.196Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:24:57.000Z"}
{"duration":1217,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT id, username, email, password_hash, is_active, created_at, updated_at\n        FROM users\n        WHERE username = $1 OR email = $1;\n      ","timestamp":"2025-02-27T21:24:57.208Z"}
{"duration":230,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT * FROM user_preferences WHERE user_id = $1","timestamp":"2025-02-27T21:24:57.597Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:28:43.716Z"}
{"duration":1451,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT id, username, email, is_active, created_at, updated_at\n        FROM users\n        WHERE id = $1;\n      ","timestamp":"2025-02-27T21:28:43.921Z"}
{"duration":248,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT * FROM user_preferences WHERE user_id = $1","timestamp":"2025-02-27T21:28:44.170Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:29:45.977Z"}
{"duration":1279,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM conversation_history\n        WHERE user_id = $1\n        ORDER BY created_at DESC\n        LIMIT $2 OFFSET $3;\n      ","timestamp":"2025-02-27T21:29:46.182Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:31:13.378Z"}
{"duration":1033,"level":"info","message":"DB query ejecutada","rows":3,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-02-27T21:31:13.539Z"}
{"duration":157,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-02-27T21:31:13.697Z"}
{"duration":247,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-02-27T21:31:13.945Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:33:01.050Z"}
{"duration":1266,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-02-27T21:33:01.215Z"}
{"duration":184,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-02-27T21:33:02.279Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-02-27T21:33:02.484Z"}
{"duration":159,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-02-27T21:33:02.644Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:33:44.776Z"}
{"duration":1311,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-02-27T21:33:44.981Z"}
{"duration":178,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-02-27T21:33:45.902Z"}
{"duration":207,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-02-27T21:33:46.110Z"}
{"duration":157,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-02-27T21:33:46.270Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:34:37.843Z"}
{"duration":1127,"level":"info","message":"DB query ejecutada","rows":3,"service":"database-service","text":"\n        SELECT * FROM conversation_history\n        WHERE user_id = $1\n        ORDER BY created_at DESC\n        LIMIT $2 OFFSET $3;\n      ","timestamp":"2025-02-27T21:34:38.017Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-02-27T21:35:58.922Z"}
{"duration":1195,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-02-27T21:35:59.123Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-02-27T21:35:59.327Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-01T15:52:44.825Z","user":"asistente_inteligente_artificial_user"}
{"code":"ENOTFOUND","errno":-3008,"hostname":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"error","message":"Error en la conexión inicial a la base de datos: getaddrinfo ENOTFOUND dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","service":"database-service","stack":"Error: getaddrinfo ENOTFOUND dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com\n    at C:\\Users\\echev\\OneDrive\\Escritorio\\9no Semestre\\Inteligencia Artificial\\asistente-voz-backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async C:\\Users\\echev\\OneDrive\\Escritorio\\9no Semestre\\Inteligencia Artificial\\asistente-voz-backend\\src\\config\\database.js:162:5","syscall":"getaddrinfo","timestamp":"2025-03-01T15:52:45.085Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-01T15:53:28.317Z","user":"asistente_inteligente_artificial_user"}
{"code":"ENOTFOUND","errno":-3008,"hostname":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"error","message":"Error en la conexión inicial a la base de datos: getaddrinfo ENOTFOUND dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","service":"database-service","stack":"Error: getaddrinfo ENOTFOUND dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com\n    at C:\\Users\\echev\\OneDrive\\Escritorio\\9no Semestre\\Inteligencia Artificial\\asistente-voz-backend\\node_modules\\pg-pool\\index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async C:\\Users\\echev\\OneDrive\\Escritorio\\9no Semestre\\Inteligencia Artificial\\asistente-voz-backend\\src\\config\\database.js:162:5","syscall":"getaddrinfo","timestamp":"2025-03-01T15:53:28.449Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-01T15:54:41.548Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-01T15:54:42.743Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-01T15:54:42.747Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-01T15:54:42.895Z"}
{"duration":191,"level":"info","message":"DB query ejecutada","rows":3,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-01T15:54:58.198Z"}
{"duration":320,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-01T15:54:58.520Z"}
{"duration":184,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-01T15:54:58.705Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-01T15:58:22.185Z"}
{"duration":1486,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-01T15:58:22.376Z"}
{"duration":167,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-01T15:58:24.390Z"}
{"duration":259,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-01T15:58:24.650Z"}
{"duration":282,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-01T15:58:24.934Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-01T15:59:43.691Z"}
{"duration":2118,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-01T15:59:43.997Z"}
{"duration":411,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-01T15:59:44.412Z"}
{"duration":295,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-01T15:59:44.708Z"}
{"duration":621,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-01T16:00:10.446Z"}
{"duration":156,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-01T16:00:12.826Z"}
{"duration":252,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-01T16:00:13.080Z"}
{"duration":205,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-01T16:00:13.288Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-03T14:30:39.909Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:30:40.835Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:30:40.843Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-03T14:30:40.969Z"}
{"duration":147,"level":"info","message":"DB query ejecutada","rows":3,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:31:09.328Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T14:31:10.209Z"}
{"duration":143,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:31:10.353Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:31:10.489Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:35:04.427Z"}
{"duration":938,"level":"info","message":"DB query ejecutada","rows":3,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:35:04.579Z"}
{"duration":146,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-03T14:35:04.725Z"}
{"duration":152,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:35:04.878Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:36:44.853Z"}
{"duration":933,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:36:44.997Z"}
{"duration":141,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-03T14:36:45.139Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:36:45.277Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-03T14:45:04.873Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:45:05.713Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:45:05.729Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-03T14:45:05.846Z"}
{"error":"cannot cast type boolean to double precision","level":"error","message":"Error al ejecutar query","service":"database-service","text":"\n        SELECT \n          k.*,\n          GREATEST(\n            SIMILARITY(k.query, $1), \n            0.8 * (to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))::float\n          ) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:45:25.318Z"}
{"error":"cannot cast type boolean to double precision","level":"error","message":"Error al ejecutar query","service":"database-service","text":"\n        SELECT \n          k.*,\n          GREATEST(\n            SIMILARITY(k.query, $1), \n            0.8 * (to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))::float\n          ) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:45:33.738Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:45:40.806Z"}
{"duration":916,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:45:40.952Z"}
{"error":"cannot cast type boolean to double precision","level":"error","message":"Error al ejecutar query","service":"database-service","text":"\n        SELECT \n          k.*,\n          GREATEST(\n            SIMILARITY(k.query, $1), \n            0.8 * (to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))::float\n          ) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:45:50.639Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:45:55.952Z"}
{"error":"cannot cast type boolean to double precision","level":"error","message":"Error al ejecutar query","service":"database-service","text":"\n        SELECT \n          k.*,\n          GREATEST(\n            SIMILARITY(k.query, $1), \n            0.8 * (to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))::float\n          ) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:45:56.090Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:46:45.711Z"}
{"duration":895,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:46:45.848Z"}
{"error":"cannot cast type boolean to double precision","level":"error","message":"Error al ejecutar query","service":"database-service","text":"\n        SELECT \n          k.*,\n          GREATEST(\n            SIMILARITY(k.query, $1), \n            0.8 * (to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))::float\n          ) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:47:09.869Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:48:45.437Z"}
{"error":"cannot cast type boolean to double precision","level":"error","message":"Error al ejecutar query","service":"database-service","text":"\n        SELECT \n          k.*,\n          GREATEST(\n            SIMILARITY(k.query, $1), \n            0.8 * (to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))::float\n          ) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:48:45.578Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:53:50.940Z"}
{"error":"cannot cast type boolean to double precision","level":"error","message":"Error al ejecutar query","service":"database-service","text":"\n        SELECT \n          k.*,\n          GREATEST(\n            SIMILARITY(k.query, $1), \n            0.8 * (to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))::float\n          ) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           to_tsvector('spanish', k.query) @@ to_tsquery('spanish', $4))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:53:51.073Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-03T14:57:28.162Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:57:29.062Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:57:29.066Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-03T14:57:29.202Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":4,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:57:42.211Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-03T14:57:42.350Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:57:42.491Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:57:53.546Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:57:54.409Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:58:10.827Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T14:58:54.646Z"}
{"duration":1182,"level":"info","message":"DB query ejecutada","rows":4,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:58:54.793Z"}
{"duration":170,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-03T14:58:54.964Z"}
{"duration":702,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:58:55.668Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:59:14.536Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:59:15.217Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:59:28.709Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":4,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T14:59:35.986Z"}
{"duration":141,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-03T14:59:36.127Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T14:59:36.263Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T15:03:18.578Z"}
{"duration":898,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T15:03:18.723Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T15:03:19.730Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:03:19.868Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:03:20.006Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T15:03:55.021Z"}
{"duration":967,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T15:03:55.162Z"}
{"duration":142,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T15:03:56.055Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:03:56.192Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:03:56.328Z"}
{"duration":154,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T15:04:24.433Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T15:04:25.337Z"}
{"duration":167,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:04:25.507Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:04:25.644Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-03T15:17:48.391Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T15:17:49.274Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T15:17:49.319Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-03T15:17:49.409Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:18:08.742Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:18:26.104Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:18:47.019Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:19:04.005Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T15:19:39.231Z"}
{"duration":901,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:19:39.369Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T15:19:57.436Z"}
{"duration":150,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:19:57.587Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:19:57.723Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T15:20:11.304Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-03T15:20:11.439Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:20:11.574Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T15:20:33.350Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T15:20:34.274Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:20:34.408Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:20:34.545Z"}
{"duration":145,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T15:20:56.206Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:20:56.915Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:21:16.116Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-03T15:40:43.345Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T15:40:44.255Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-03T15:40:44.476Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T15:40:44.703Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T15:41:28.778Z"}
{"duration":893,"level":"info","message":"DB query ejecutada","rows":2,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T15:41:28.917Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T15:41:29.872Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:41:30.009Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:41:30.147Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:41:46.879Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T15:42:05.596Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T15:42:06.503Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:42:06.641Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:42:06.782Z"}
{"duration":141,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:42:26.485Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T15:43:02.361Z"}
{"duration":897,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:43:02.496Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-03T15:53:54.998Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T15:53:55.973Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T15:53:55.983Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-03T15:53:56.122Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:54:21.573Z"}
{"duration":152,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T15:54:36.006Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-03T15:54:36.148Z"}
{"duration":143,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:54:36.297Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:54:54.449Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:55:07.027Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:55:19.820Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T15:55:55.542Z"}
{"duration":1004,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T15:55:55.688Z"}
{"duration":143,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T15:55:56.652Z"}
{"duration":148,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:55:56.801Z"}
{"duration":143,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:55:56.946Z"}
{"duration":143,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T15:56:23.576Z"}
{"duration":205,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T15:56:24.552Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:56:24.688Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T15:56:24.823Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-03T20:28:08.548Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T20:28:09.700Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T20:28:09.718Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-03T20:28:09.926Z"}
{"duration":148,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T20:28:22.696Z"}
{"duration":229,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-03T20:28:22.926Z"}
{"duration":141,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T20:28:23.069Z"}
{"duration":186,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T20:28:32.450Z"}
{"duration":166,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T20:28:43.099Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-03T20:52:54.233Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T20:52:55.380Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T20:52:55.392Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-03T20:52:55.563Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T20:53:34.714Z"}
{"duration":1026,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T20:53:34.884Z"}
{"duration":174,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T20:53:35.907Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T20:53:36.112Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T20:53:36.247Z"}
{"duration":223,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T20:53:49.936Z"}
{"duration":171,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T20:54:04.168Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T20:54:04.372Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T20:54:04.577Z"}
{"duration":199,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T20:54:23.418Z"}
{"duration":142,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T20:54:24.443Z"}
{"duration":224,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T20:54:45.539Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T20:55:23.429Z"}
{"duration":1435,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-03T20:55:23.633Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-03T20:55:24.625Z"}
{"duration":147,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-03T20:55:24.773Z"}
{"duration":164,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-03T20:55:24.939Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-03T21:04:58.864Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T21:05:00.053Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T21:05:00.055Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-03T21:05:00.263Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-03T21:19:11.652Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T21:19:12.740Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-03T21:19:12.957Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T21:19:12.959Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-03T21:36:53.028Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T21:36:54.162Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-03T21:36:54.267Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-03T21:36:54.301Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-04T14:40:52.450Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T14:40:53.390Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T14:40:53.406Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-04T14:40:53.535Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-04T15:28:57.256Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T15:28:58.148Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T15:28:58.169Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-04T15:28:58.306Z"}
{"duration":151,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T15:29:07.688Z"}
{"duration":142,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T15:29:17.833Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T15:29:18.806Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T15:29:32.348Z"}
{"duration":211,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T15:29:44.432Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T15:30:05.503Z"}
{"duration":149,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-04T15:30:05.652Z"}
{"duration":141,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T15:30:05.796Z"}
{"duration":168,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T15:30:34.192Z"}
{"duration":145,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-04T15:30:34.338Z"}
{"duration":195,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T15:30:34.536Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-04T15:36:48.234Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T15:36:49.126Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T15:36:49.237Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-04T15:36:49.264Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T15:38:43.683Z"}
{"duration":977,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T15:38:43.832Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-04T15:50:36.411Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T15:50:37.306Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T15:50:37.384Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-04T15:50:37.449Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-04T15:55:42.162Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T15:55:43.049Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T15:55:43.067Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-04T15:55:43.210Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-04T15:58:09.792Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T15:58:10.668Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T15:58:10.671Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-04T15:58:10.807Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-04T16:02:03.450Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T16:02:04.362Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T16:02:04.431Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-04T16:02:04.502Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-04T16:03:31.821Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T16:03:32.707Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T16:03:32.710Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-04T16:03:32.848Z"}
{"duration":143,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:03:48.126Z"}
{"duration":145,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-04T16:03:48.272Z"}
{"duration":143,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:03:48.418Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:04:02.227Z"}
{"duration":141,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-04T16:04:03.176Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:04:03.316Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:04:03.459Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:04:15.589Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T16:04:52.665Z"}
{"duration":1007,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:04:52.863Z"}
{"duration":147,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-04T16:04:53.011Z"}
{"duration":147,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:04:53.162Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-04T16:07:25.972Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T16:07:26.851Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T16:07:26.927Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-04T16:07:26.992Z"}
{"duration":142,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:07:43.059Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-04T16:07:43.197Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:07:43.339Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:07:52.362Z"}
{"duration":143,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-04T16:07:52.506Z"}
{"duration":160,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:07:52.671Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T16:12:34.935Z"}
{"duration":1249,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:12:35.074Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-04T16:12:35.213Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:12:35.353Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:12:44.819Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-04T16:12:44.956Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:12:45.097Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:13:00.617Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:13:01.636Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:13:18.440Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:13:19.138Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-04T16:15:34.013Z"}
{"duration":1030,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:15:34.171Z"}
{"duration":158,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:15:34.896Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:15:45.053Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:15:45.944Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:15:52.500Z"}
{"duration":146,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-04T16:15:52.647Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:15:52.785Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-04T16:16:03.986Z"}
{"duration":147,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-04T16:16:04.134Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-04T16:16:04.273Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T14:33:36.648Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T14:33:37.992Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T14:33:37.996Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T14:33:38.201Z"}
{"duration":181,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T14:33:50.383Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-05T14:33:50.586Z"}
{"duration":143,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T14:33:50.735Z"}
{"duration":172,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T14:34:00.825Z"}
{"duration":183,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T14:34:01.730Z"}
{"duration":190,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T14:34:10.042Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-05T14:34:10.247Z"}
{"duration":199,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T14:34:10.451Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T14:34:50.386Z"}
{"duration":1256,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%' OR\n           k.query ILIKE '%' || $1 || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T14:34:50.591Z"}
{"duration":180,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-05T14:34:51.513Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-05T14:34:51.718Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T14:34:51.856Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T15:05:50.098Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:05:51.227Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:05:51.232Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T15:05:51.436Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:07:16.015Z"}
{"duration":1199,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T15:07:16.221Z"}
{"duration":201,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-05T15:07:16.425Z"}
{"duration":200,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T15:07:16.630Z"}
{"duration":155,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T15:07:25.454Z"}
{"duration":185,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-05T15:07:25.641Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T15:07:25.848Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T15:08:58.570Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:08:59.745Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:08:59.748Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T15:08:59.951Z"}
{"duration":1254,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:08:59.954Z"}
{"duration":192,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:09:00.154Z"}
{"duration":201,"level":"info","message":"DB query ejecutada","rows":30,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-05T15:09:00.357Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":49,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-05T15:09:00.563Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":30,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-05T15:09:00.767Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-05T15:09:00.972Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:10:38.363Z"}
{"duration":1408,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T15:10:38.567Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T15:10:47.701Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T15:10:49.003Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:11:57.107Z"}
{"duration":1246,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T15:11:57.313Z"}
{"duration":143,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T15:11:58.420Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T15:12:08.414Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T15:20:12.719Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:20:13.962Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:20:13.965Z"}
{"duration":1326,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:20:14.170Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T15:20:14.187Z"}
{"duration":186,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:20:14.371Z"}
{"duration":162,"level":"info","message":"DB query ejecutada","rows":30,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-05T15:20:14.535Z"}
{"duration":142,"level":"info","message":"DB query ejecutada","rows":30,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-05T15:20:14.679Z"}
{"duration":201,"level":"info","message":"DB query ejecutada","rows":30,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-05T15:20:14.882Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-05T15:20:15.087Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:21:45.937Z"}
{"duration":1218,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T15:21:46.123Z"}
{"duration":154,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T15:21:47.409Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T15:40:52.515Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:40:53.463Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:40:53.493Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:40:53.536Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T15:40:53.602Z"}
{"duration":998,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:40:53.643Z"}
{"duration":1039,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:40:53.683Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T15:43:50.648Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:43:51.790Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:43:51.886Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:43:51.890Z"}
{"duration":1147,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:43:51.925Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T15:43:52.023Z"}
{"duration":1248,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:43:52.026Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T15:48:04.685Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:48:05.773Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:48:05.776Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T15:48:05.910Z"}
{"duration":1105,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:48:05.913Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:48:06.069Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:48:06.078Z"}
{"duration":207,"level":"info","message":"DB query ejecutada","rows":30,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-05T15:48:06.278Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T15:52:05.022Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:52:06.262Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:52:06.263Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:52:06.353Z"}
{"duration":1222,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:52:06.396Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T15:52:42.735Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:52:44.106Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:52:44.108Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:52:44.109Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T15:52:44.313Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T15:53:43.533Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:53:44.616Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:53:44.619Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T15:53:44.700Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T15:53:44.752Z"}
{"duration":1099,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:53:44.755Z"}
{"duration":1178,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T15:53:44.832Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T16:05:26.630Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:05:27.898Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:05:27.929Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:05:27.937Z"}
{"duration":1194,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:05:28.037Z"}
{"duration":1218,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:05:28.062Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T16:07:47.648Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:07:48.831Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:07:48.864Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:07:48.900Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T16:07:48.976Z"}
{"duration":1224,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:07:49.002Z"}
{"duration":1262,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:07:49.040Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T16:08:46.176Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:08:47.601Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:08:47.604Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:08:47.606Z"}
{"duration":1467,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:08:47.807Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T16:14:11.931Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:14:13.125Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:14:13.128Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T16:14:13.262Z"}
{"duration":1170,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:14:13.264Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:14:13.405Z"}
{"duration":238,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-05T16:14:13.644Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-05T16:14:13.850Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-05T16:14:14.055Z"}
{"duration":200,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-05T16:14:14.258Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-05T16:14:14.464Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-05T16:14:14.668Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-05T16:14:14.873Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:14:51.225Z"}
{"duration":1209,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T16:14:51.432Z"}
{"duration":213,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T16:14:52.661Z"}
{"duration":161,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T16:14:53.684Z"}
{"duration":182,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T16:14:54.055Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T16:15:21.154Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:15:22.390Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:15:22.497Z"}
{"duration":1213,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:15:22.531Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T16:15:22.636Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:15:22.671Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-05T16:15:22.875Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-05T16:15:23.079Z"}
{"duration":208,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-05T16:15:23.288Z"}
{"duration":197,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-05T16:15:23.489Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-05T16:15:23.695Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-05T16:15:23.899Z"}
{"duration":201,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-05T16:15:24.106Z"}
{"duration":183,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T16:15:53.084Z"}
{"duration":198,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T16:16:02.197Z"}
{"duration":190,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T16:16:02.709Z"}
{"duration":216,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T16:16:03.734Z"}
{"duration":197,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T16:16:04.110Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:20:29.361Z"}
{"duration":1211,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-05T16:20:29.570Z"}
{"duration":201,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-05T16:20:29.772Z"}
{"duration":201,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T16:20:29.976Z"}
{"duration":166,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T16:20:37.964Z"}
{"duration":182,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T16:20:38.476Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T16:20:39.636Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T16:20:39.946Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:23:39.522Z"}
{"duration":1200,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T16:23:39.726Z"}
{"duration":146,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T16:23:40.134Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T16:23:41.092Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T16:23:41.428Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T16:24:17.588Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:24:18.741Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:24:18.748Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T16:24:18.948Z"}
{"duration":1192,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:24:18.950Z"}
{"duration":190,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:24:19.150Z"}
{"duration":206,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-05T16:24:19.359Z"}
{"duration":197,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-05T16:24:19.560Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-05T16:24:19.766Z"}
{"duration":201,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-05T16:24:19.970Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-05T16:24:20.177Z"}
{"duration":200,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-05T16:24:20.379Z"}
{"duration":200,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-05T16:24:20.585Z"}
{"duration":144,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T16:24:28.879Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T16:24:29.698Z"}
{"duration":145,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T16:24:30.619Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T16:24:31.058Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T16:27:16.820Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:27:17.687Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T16:27:17.689Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T16:27:17.826Z"}
{"duration":921,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:27:17.828Z"}
{"duration":141,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T16:27:17.976Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-05T16:27:18.117Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-05T16:27:18.254Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-05T16:27:18.391Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-05T16:27:18.527Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-05T16:27:18.668Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-05T16:27:18.802Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-05T16:27:18.937Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T16:27:25.927Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T16:27:26.737Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T16:27:27.682Z"}
{"duration":149,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T16:27:28.213Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T17:00:10.285Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T17:00:11.166Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T17:00:11.254Z"}
{"duration":918,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T17:00:11.302Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T17:00:11.395Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T17:00:11.436Z"}
{"duration":161,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-05T17:00:11.598Z"}
{"duration":187,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-05T17:00:11.786Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-05T17:00:11.924Z"}
{"duration":141,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-05T17:00:12.066Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-05T17:00:12.198Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-05T17:00:12.332Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-05T17:00:12.468Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T17:00:22.203Z"}
{"duration":187,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO ia_cache (query, query_hash, response, source, created_at)\n        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)\n        ON CONFLICT (query_hash) \n        DO UPDATE SET \n          response = $3,\n          source = $4,\n          created_at = CURRENT_TIMESTAMP\n      ","timestamp":"2025-03-05T17:00:24.169Z"}
{"duration":184,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-05T17:00:24.355Z"}
{"duration":147,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-05T17:00:24.503Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T17:00:24.643Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T17:00:53.350Z"}
{"duration":145,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           $1 ILIKE '%' || k.query || '%')\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        ORDER BY \n          similarity DESC, \n          confidence DESC,\n          times_used DESC\n        LIMIT 5;\n      ","timestamp":"2025-03-05T17:01:01.728Z"}
{"duration":153,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T17:01:02.927Z"}
{"duration":176,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T17:01:15.534Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO ia_cache (query, query_hash, response, source, created_at)\n        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)\n        ON CONFLICT (query_hash) \n        DO UPDATE SET \n          response = $3,\n          source = $4,\n          created_at = CURRENT_TIMESTAMP\n      ","timestamp":"2025-03-05T17:01:17.636Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-05T17:01:17.769Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-05T17:01:17.904Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T17:01:18.040Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T17:31:39.294Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T17:31:40.280Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T17:31:40.282Z"}
{"duration":992,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T17:31:40.427Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T17:31:40.442Z"}
{"duration":142,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T17:31:40.583Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-05T17:31:40.724Z"}
{"duration":145,"level":"info","message":"DB query ejecutada","rows":2,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-05T17:31:40.871Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-05T17:31:41.005Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-05T17:31:41.139Z"}
{"duration":144,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-05T17:31:41.285Z"}
{"duration":142,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-05T17:31:41.428Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-05T17:31:41.564Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T17:33:25.283Z"}
{"duration":931,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T17:33:25.429Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T17:33:56.981Z"}
{"duration":960,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T17:33:57.131Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T18:38:07.221Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T18:38:08.205Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T18:38:08.229Z"}
{"duration":900,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T18:38:08.340Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T18:38:08.359Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T18:38:08.482Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-05T18:38:08.621Z"}
{"duration":152,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-05T18:38:08.774Z"}
{"duration":232,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-05T18:38:09.006Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-05T18:38:09.140Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-05T18:38:09.275Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-05T18:38:09.406Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-05T18:38:09.538Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T18:38:48.697Z"}
{"duration":910,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T18:38:48.833Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-05T18:38:48.972Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-05T18:38:49.113Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T18:38:49.252Z"}
{"duration":148,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        WITH ranked_results AS (\n          SELECT \n            k.*,\n            SIMILARITY(k.query, $1) as similarity,\n            -- Añadir ranking adicional para coincidencias parciales\n            CASE \n              WHEN k.query ILIKE $1 THEN 3        -- Coincidencia exacta\n              WHEN k.query ILIKE $1 || '%' THEN 2 -- Empieza con\n              WHEN k.query ILIKE '%' || $1 THEN 2 -- Termina con\n              WHEN k.query ILIKE '%' || $1 || '%' THEN 1 -- Contiene\n              ELSE 0\n            END as match_type,\n            -- Añadir puntuación para coincidencia de palabras clave\n            (\n              SELECT COUNT(*) \n              FROM unnest(string_to_array($1, ' ')) as word \n              WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n            ) as keyword_matches\n          FROM \n            knowledge_base k\n          WHERE \n            (SIMILARITY(k.query, $1) > $2 OR \n             k.query ILIKE '%' || $1 || '%' OR\n             $1 ILIKE '%' || k.query || '%')\n            AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        )\n        SELECT * FROM ranked_results\n        ORDER BY \n          match_type DESC,        -- Priorizar tipo de coincidencia\n          similarity DESC,        -- Luego por similitud textual\n          keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n          confidence DESC,        -- Luego por confianza\n          times_used DESC         -- Finalmente por uso\n        LIMIT 7;\n      ","timestamp":"2025-03-05T18:38:54.984Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T18:38:55.834Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-05T18:39:09.399Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-05T18:39:09.535Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-05T18:39:09.670Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-05T18:39:09.804Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-05T18:40:06.655Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T18:40:07.606Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-05T18:40:07.689Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-05T18:40:07.742Z"}
{"duration":996,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T18:40:07.824Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-05T18:40:07.964Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-05T18:40:08.105Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":2,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-05T18:40:08.242Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-05T18:40:08.378Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-05T18:40:08.518Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-05T18:40:08.658Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-05T18:40:08.795Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-05T18:40:08.929Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-06T14:31:56.186Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T14:31:57.624Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T14:31:57.675Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-06T14:31:57.761Z"}
{"duration":1224,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T14:31:57.808Z"}
{"duration":150,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T14:31:58.010Z"}
{"duration":201,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-06T14:31:58.213Z"}
{"duration":205,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-06T14:31:58.419Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-06T14:31:58.623Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-06T14:31:58.829Z"}
{"duration":201,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-06T14:31:59.034Z"}
{"duration":205,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-06T14:31:59.241Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-06T14:31:59.375Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T14:41:30.126Z"}
{"duration":996,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-06T14:41:30.329Z"}
{"duration":150,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-06T14:41:39.032Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T14:50:28.039Z"}
{"duration":1215,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-06T14:50:28.244Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T14:51:18.727Z"}
{"duration":1257,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T14:51:18.931Z"}
{"duration":151,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T14:51:38.144Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T14:52:38.803Z"}
{"duration":1006,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        WITH ranked_results AS (\n          SELECT \n            k.*,\n            SIMILARITY(k.query, $1) as similarity,\n            -- Añadir ranking adicional para coincidencias parciales\n            CASE \n              WHEN k.query ILIKE $1 THEN 3        -- Coincidencia exacta\n              WHEN k.query ILIKE $1 || '%' THEN 2 -- Empieza con\n              WHEN k.query ILIKE '%' || $1 THEN 2 -- Termina con\n              WHEN k.query ILIKE '%' || $1 || '%' THEN 1 -- Contiene\n              ELSE 0\n            END as match_type,\n            -- Añadir puntuación para coincidencia de palabras clave\n            (\n              SELECT COUNT(*) \n              FROM unnest(string_to_array($1, ' ')) as word \n              WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n            ) as keyword_matches\n          FROM \n            knowledge_base k\n          WHERE \n            (SIMILARITY(k.query, $1) > $2 OR \n             k.query ILIKE '%' || $1 || '%' OR\n             $1 ILIKE '%' || k.query || '%')\n            AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        )\n        SELECT * FROM ranked_results\n        ORDER BY \n          match_type DESC,        -- Priorizar tipo de coincidencia\n          similarity DESC,        -- Luego por similitud textual\n          keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n          confidence DESC,        -- Luego por confianza\n          times_used DESC         -- Finalmente por uso\n        LIMIT 7;\n      ","timestamp":"2025-03-06T14:52:38.937Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T14:52:39.907Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-06T14:53:16.976Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T14:53:18.201Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T14:53:18.261Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-06T14:53:18.333Z"}
{"duration":1140,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T14:53:18.390Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-06T15:11:44.010Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:11:45.470Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:11:45.492Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-06T15:11:45.643Z"}
{"duration":1013,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T15:11:45.645Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T15:11:45.785Z"}
{"duration":160,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-06T15:11:45.947Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-06T15:11:46.081Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-06T15:11:46.213Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-06T15:11:46.345Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-06T15:11:46.479Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-06T15:11:46.612Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-06T15:11:46.750Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:13:25.995Z"}
{"duration":1002,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T15:13:26.200Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:14:06.238Z"}
{"duration":978,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-06T15:14:06.375Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:15:03.175Z"}
{"duration":1036,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T15:15:03.333Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO ia_cache (query, query_hash, response, source, created_at)\n        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)\n        ON CONFLICT (query_hash) \n        DO UPDATE SET \n          response = $3,\n          source = $4,\n          created_at = CURRENT_TIMESTAMP\n      ","timestamp":"2025-03-06T15:15:04.847Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        WITH ranked_results AS (\n          SELECT \n            k.*,\n            SIMILARITY(k.query, $1) as similarity,\n            -- Añadir ranking adicional para coincidencias parciales\n            CASE \n              WHEN k.query ILIKE $1 THEN 3        -- Coincidencia exacta\n              WHEN k.query ILIKE $1 || '%' THEN 2 -- Empieza con\n              WHEN k.query ILIKE '%' || $1 THEN 2 -- Termina con\n              WHEN k.query ILIKE '%' || $1 || '%' THEN 1 -- Contiene\n              ELSE 0\n            END as match_type,\n            -- Añadir puntuación para coincidencia de palabras clave\n            (\n              SELECT COUNT(*) \n              FROM unnest(string_to_array($1, ' ')) as word \n              WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n            ) as keyword_matches\n          FROM \n            knowledge_base k\n          WHERE \n            (SIMILARITY(k.query, $1) > $2 OR \n             k.query ILIKE '%' || $1 || '%' OR\n             $1 ILIKE '%' || k.query || '%')\n            AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        )\n        SELECT * FROM ranked_results\n        ORDER BY \n          match_type DESC,        -- Priorizar tipo de coincidencia\n          similarity DESC,        -- Luego por similitud textual\n          keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n          confidence DESC,        -- Luego por confianza\n          times_used DESC         -- Finalmente por uso\n        LIMIT 7;\n      ","timestamp":"2025-03-06T15:15:04.990Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-06T15:15:05.121Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-06T15:15:05.254Z"}
{"duration":170,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-06T15:15:05.426Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:15:44.957Z"}
{"duration":1283,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T15:15:45.160Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:16:42.702Z"}
{"duration":1074,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T15:16:42.836Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-06T15:17:11.344Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:17:12.714Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:17:12.718Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-06T15:17:12.852Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:17:45.884Z"}
{"duration":905,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        WITH ranked_results AS (\n          SELECT \n            k.*,\n            SIMILARITY(k.query, $1) as similarity,\n            -- Añadir ranking adicional para coincidencias parciales\n            CASE \n              WHEN k.query ILIKE $1 THEN 3        -- Coincidencia exacta\n              WHEN k.query ILIKE $1 || '%' THEN 2 -- Empieza con\n              WHEN k.query ILIKE '%' || $1 THEN 2 -- Termina con\n              WHEN k.query ILIKE '%' || $1 || '%' THEN 1 -- Contiene\n              ELSE 0\n            END as match_type,\n            -- Añadir puntuación para coincidencia de palabras clave\n            (\n              SELECT COUNT(*) \n              FROM unnest(string_to_array($1, ' ')) as word \n              WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n            ) as keyword_matches\n          FROM \n            knowledge_base k\n          WHERE \n            (SIMILARITY(k.query, $1) > $2 OR \n             k.query ILIKE '%' || $1 || '%' OR\n             $1 ILIKE '%' || k.query || '%')\n            AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        )\n        SELECT * FROM ranked_results\n        ORDER BY \n          match_type DESC,        -- Priorizar tipo de coincidencia\n          similarity DESC,        -- Luego por similitud textual\n          keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n          confidence DESC,        -- Luego por confianza\n          times_used DESC         -- Finalmente por uso\n        LIMIT 7;\n      ","timestamp":"2025-03-06T15:17:46.029Z"}
{"duration":206,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T15:17:47.011Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:22:40.820Z"}
{"duration":1122,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        WITH ranked_results AS (\n          SELECT \n            k.*,\n            SIMILARITY(k.query, $1) as similarity,\n            -- Añadir ranking adicional para coincidencias parciales\n            CASE \n              WHEN k.query ILIKE $1 THEN 3        -- Coincidencia exacta\n              WHEN k.query ILIKE $1 || '%' THEN 2 -- Empieza con\n              WHEN k.query ILIKE '%' || $1 THEN 2 -- Termina con\n              WHEN k.query ILIKE '%' || $1 || '%' THEN 1 -- Contiene\n              ELSE 0\n            END as match_type,\n            -- Añadir puntuación para coincidencia de palabras clave\n            (\n              SELECT COUNT(*) \n              FROM unnest(string_to_array($1, ' ')) as word \n              WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n            ) as keyword_matches\n          FROM \n            knowledge_base k\n          WHERE \n            (SIMILARITY(k.query, $1) > $2 OR \n             k.query ILIKE '%' || $1 || '%' OR\n             $1 ILIKE '%' || k.query || '%')\n            AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        )\n        SELECT * FROM ranked_results\n        ORDER BY \n          match_type DESC,        -- Priorizar tipo de coincidencia\n          similarity DESC,        -- Luego por similitud textual\n          keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n          confidence DESC,        -- Luego por confianza\n          times_used DESC         -- Finalmente por uso\n        LIMIT 7;\n      ","timestamp":"2025-03-06T15:22:40.957Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T15:22:41.792Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:29:16.416Z"}
{"duration":1118,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-06T15:29:16.555Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:32:18.555Z"}
{"duration":1077,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        WITH ranked_results AS (\n          SELECT \n            k.*,\n            SIMILARITY(k.query, $1) as similarity,\n            -- Añadir ranking adicional para coincidencias parciales\n            CASE \n              WHEN k.query ILIKE $1 THEN 3        -- Coincidencia exacta\n              WHEN k.query ILIKE $1 || '%' THEN 2 -- Empieza con\n              WHEN k.query ILIKE '%' || $1 THEN 2 -- Termina con\n              WHEN k.query ILIKE '%' || $1 || '%' THEN 1 -- Contiene\n              ELSE 0\n            END as match_type,\n            -- Añadir puntuación para coincidencia de palabras clave\n            (\n              SELECT COUNT(*) \n              FROM unnest(string_to_array($1, ' ')) as word \n              WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n            ) as keyword_matches\n          FROM \n            knowledge_base k\n          WHERE \n            (SIMILARITY(k.query, $1) > $2 OR \n             k.query ILIKE '%' || $1 || '%' OR\n             $1 ILIKE '%' || k.query || '%')\n            AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        )\n        SELECT * FROM ranked_results\n        ORDER BY \n          match_type DESC,        -- Priorizar tipo de coincidencia\n          similarity DESC,        -- Luego por similitud textual\n          keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n          confidence DESC,        -- Luego por confianza\n          times_used DESC         -- Finalmente por uso\n        LIMIT 7;\n      ","timestamp":"2025-03-06T15:32:18.697Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T15:32:19.474Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:34:19.788Z"}
{"duration":919,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-06T15:34:19.928Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-06T15:34:24.728Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-06T15:43:05.539Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:43:06.547Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T15:43:06.557Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-06T15:43:06.681Z"}
{"duration":965,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T15:43:06.691Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-06T17:18:14.097Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:18:15.225Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:18:15.227Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-06T17:18:15.374Z"}
{"duration":977,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T17:18:15.375Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T17:18:15.519Z"}
{"duration":147,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-06T17:18:15.668Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-06T17:18:15.800Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-06T17:18:15.933Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-06T17:18:16.067Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-06T17:18:16.200Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-06T17:18:16.336Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-06T17:18:16.471Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:18:48.116Z"}
{"duration":892,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T17:18:48.267Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:23:34.102Z"}
{"duration":950,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        WITH ranked_results AS (\n          SELECT \n            k.*,\n            SIMILARITY(k.query, $1) as similarity,\n            -- Añadir ranking adicional para coincidencias parciales\n            CASE \n              WHEN k.query ILIKE $1 THEN 3        -- Coincidencia exacta\n              WHEN k.query ILIKE $1 || '%' THEN 2 -- Empieza con\n              WHEN k.query ILIKE '%' || $1 THEN 2 -- Termina con\n              WHEN k.query ILIKE '%' || $1 || '%' THEN 1 -- Contiene\n              ELSE 0\n            END as match_type,\n            -- Añadir puntuación para coincidencia de palabras clave\n            (\n              SELECT COUNT(*) \n              FROM unnest(string_to_array($1, ' ')) as word \n              WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n            ) as keyword_matches\n          FROM \n            knowledge_base k\n          WHERE \n            (SIMILARITY(k.query, $1) > $2 OR \n             k.query ILIKE '%' || $1 || '%' OR\n             $1 ILIKE '%' || k.query || '%')\n            AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        )\n        SELECT * FROM ranked_results\n        ORDER BY \n          match_type DESC,        -- Priorizar tipo de coincidencia\n          similarity DESC,        -- Luego por similitud textual\n          keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n          confidence DESC,        -- Luego por confianza\n          times_used DESC         -- Finalmente por uso\n        LIMIT 7;\n      ","timestamp":"2025-03-06T17:23:34.237Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T17:23:35.412Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-06T17:23:37.108Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:23:38.084Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:23:38.085Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-06T17:23:38.219Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-06T17:23:49.306Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-06T17:27:30.219Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:27:31.248Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:27:31.270Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-06T17:27:31.380Z"}
{"duration":928,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T17:27:31.408Z"}
{"duration":155,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T17:27:31.566Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-06T17:27:31.706Z"}
{"duration":154,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-06T17:27:31.861Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-06T17:27:31.995Z"}
{"duration":174,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-06T17:27:32.170Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-06T17:27:32.306Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-06T17:27:32.446Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-06T17:27:32.581Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T17:27:40.834Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:31:17.938Z"}
{"duration":948,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        WITH ranked_results AS (\n          SELECT \n            k.*,\n            SIMILARITY(k.query, $1) as similarity,\n            -- Añadir ranking adicional para coincidencias parciales\n            CASE \n              WHEN k.query ILIKE $1 THEN 3        -- Coincidencia exacta\n              WHEN k.query ILIKE $1 || '%' THEN 2 -- Empieza con\n              WHEN k.query ILIKE '%' || $1 THEN 2 -- Termina con\n              WHEN k.query ILIKE '%' || $1 || '%' THEN 1 -- Contiene\n              ELSE 0\n            END as match_type,\n            -- Añadir puntuación para coincidencia de palabras clave\n            (\n              SELECT COUNT(*) \n              FROM unnest(string_to_array($1, ' ')) as word \n              WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n            ) as keyword_matches\n          FROM \n            knowledge_base k\n          WHERE \n            (SIMILARITY(k.query, $1) > $2 OR \n             k.query ILIKE '%' || $1 || '%' OR\n             $1 ILIKE '%' || k.query || '%')\n            AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        )\n        SELECT * FROM ranked_results\n        ORDER BY \n          match_type DESC,        -- Priorizar tipo de coincidencia\n          similarity DESC,        -- Luego por similitud textual\n          keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n          confidence DESC,        -- Luego por confianza\n          times_used DESC         -- Finalmente por uso\n        LIMIT 7;\n      ","timestamp":"2025-03-06T17:31:18.075Z"}
{"duration":294,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T17:31:19.375Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-06T17:31:55.853Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:31:56.820Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:31:56.849Z"}
{"duration":917,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T17:31:56.949Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-06T17:33:31.381Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:33:32.341Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:33:32.344Z"}
{"duration":919,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T17:33:32.477Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-06T17:33:32.486Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T17:33:32.617Z"}
{"duration":156,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-06T17:33:32.774Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-06T17:33:32.907Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-06T17:33:33.038Z"}
{"duration":168,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-06T17:33:33.207Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-06T17:33:33.340Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-06T17:33:33.471Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-06T17:33:33.606Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T17:33:40.335Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO ia_cache (query, query_hash, response, source, created_at)\n        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)\n        ON CONFLICT (query_hash) \n        DO UPDATE SET \n          response = $3,\n          source = $4,\n          created_at = CURRENT_TIMESTAMP\n      ","timestamp":"2025-03-06T17:33:42.174Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        WITH ranked_results AS (\n          SELECT \n            k.*,\n            SIMILARITY(k.query, $1) as similarity,\n            -- Añadir ranking adicional para coincidencias parciales\n            CASE \n              WHEN k.query ILIKE $1 THEN 3        -- Coincidencia exacta\n              WHEN k.query ILIKE $1 || '%' THEN 2 -- Empieza con\n              WHEN k.query ILIKE '%' || $1 THEN 2 -- Termina con\n              WHEN k.query ILIKE '%' || $1 || '%' THEN 1 -- Contiene\n              ELSE 0\n            END as match_type,\n            -- Añadir puntuación para coincidencia de palabras clave\n            (\n              SELECT COUNT(*) \n              FROM unnest(string_to_array($1, ' ')) as word \n              WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n            ) as keyword_matches\n          FROM \n            knowledge_base k\n          WHERE \n            (SIMILARITY(k.query, $1) > $2 OR \n             k.query ILIKE '%' || $1 || '%' OR\n             $1 ILIKE '%' || k.query || '%')\n            AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        )\n        SELECT * FROM ranked_results\n        ORDER BY \n          match_type DESC,        -- Priorizar tipo de coincidencia\n          similarity DESC,        -- Luego por similitud textual\n          keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n          confidence DESC,        -- Luego por confianza\n          times_used DESC         -- Finalmente por uso\n        LIMIT 7;\n      ","timestamp":"2025-03-06T17:33:42.313Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-06T17:33:42.444Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-06T17:33:42.580Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-06T17:33:42.716Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T17:34:17.272Z"}
{"duration":886,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-06T17:34:17.411Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO ia_cache (query, query_hash, response, source, created_at)\n        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)\n        ON CONFLICT (query_hash) \n        DO UPDATE SET \n          response = $3,\n          source = $4,\n          created_at = CURRENT_TIMESTAMP\n      ","timestamp":"2025-03-06T17:34:18.336Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        WITH ranked_results AS (\n          SELECT \n            k.*,\n            SIMILARITY(k.query, $1) as similarity,\n            -- Añadir ranking adicional para coincidencias parciales\n            CASE \n              WHEN k.query ILIKE $1 THEN 3        -- Coincidencia exacta\n              WHEN k.query ILIKE $1 || '%' THEN 2 -- Empieza con\n              WHEN k.query ILIKE '%' || $1 THEN 2 -- Termina con\n              WHEN k.query ILIKE '%' || $1 || '%' THEN 1 -- Contiene\n              ELSE 0\n            END as match_type,\n            -- Añadir puntuación para coincidencia de palabras clave\n            (\n              SELECT COUNT(*) \n              FROM unnest(string_to_array($1, ' ')) as word \n              WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n            ) as keyword_matches\n          FROM \n            knowledge_base k\n          WHERE \n            (SIMILARITY(k.query, $1) > $2 OR \n             k.query ILIKE '%' || $1 || '%' OR\n             $1 ILIKE '%' || k.query || '%')\n            AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        )\n        SELECT * FROM ranked_results\n        ORDER BY \n          match_type DESC,        -- Priorizar tipo de coincidencia\n          similarity DESC,        -- Luego por similitud textual\n          keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n          confidence DESC,        -- Luego por confianza\n          times_used DESC         -- Finalmente por uso\n        LIMIT 7;\n      ","timestamp":"2025-03-06T17:34:18.474Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-06T17:34:18.610Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-06T17:34:18.746Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-06T17:34:18.880Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-06T20:08:03.685Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T20:08:04.680Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T20:08:04.691Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-06T20:08:04.811Z"}
{"duration":905,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T20:08:04.821Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T20:08:04.956Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-06T20:08:05.096Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":2,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-06T20:08:05.225Z"}
{"duration":171,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-06T20:08:05.397Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-06T20:08:05.528Z"}
{"duration":128,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-06T20:08:05.657Z"}
{"duration":128,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-06T20:08:05.786Z"}
{"duration":128,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-06T20:08:05.915Z"}
{"duration":173,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        WITH ranked_results AS (\n          SELECT \n            k.*,\n            SIMILARITY(k.query, $1) as similarity,\n            -- Añadir ranking adicional para coincidencias parciales\n            CASE \n              WHEN k.query ILIKE $1 THEN 3        -- Coincidencia exacta\n              WHEN k.query ILIKE $1 || '%' THEN 2 -- Empieza con\n              WHEN k.query ILIKE '%' || $1 THEN 2 -- Termina con\n              WHEN k.query ILIKE '%' || $1 || '%' THEN 1 -- Contiene\n              ELSE 0\n            END as match_type,\n            -- Añadir puntuación para coincidencia de palabras clave\n            (\n              SELECT COUNT(*) \n              FROM unnest(string_to_array($1, ' ')) as word \n              WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n            ) as keyword_matches\n          FROM \n            knowledge_base k\n          WHERE \n            (SIMILARITY(k.query, $1) > $2 OR \n             k.query ILIKE '%' || $1 || '%' OR\n             $1 ILIKE '%' || k.query || '%')\n            AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        )\n        SELECT * FROM ranked_results\n        ORDER BY \n          match_type DESC,        -- Priorizar tipo de coincidencia\n          similarity DESC,        -- Luego por similitud textual\n          keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n          confidence DESC,        -- Luego por confianza\n          times_used DESC         -- Finalmente por uso\n        LIMIT 7;\n      ","timestamp":"2025-03-06T20:08:24.007Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-06T20:08:25.197Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-06T20:29:20.873Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T20:29:21.833Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-06T20:29:21.836Z"}
{"duration":919,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-06T20:29:21.973Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-07T18:07:20.036Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-07T18:07:21.130Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-07T18:07:21.134Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-07T18:07:21.271Z"}
{"duration":929,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-07T18:07:21.273Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-07T18:07:21.410Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-07T18:07:21.547Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":22,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-07T18:07:21.681Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-07T18:07:21.811Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-07T18:07:21.943Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-07T18:07:22.077Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-07T18:07:22.210Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-07T18:07:22.343Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-07T18:20:40.624Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-07T18:20:41.591Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-07T18:20:41.605Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-07T18:20:41.725Z"}
{"duration":916,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-07T18:20:41.733Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-07T18:22:22.666Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-07T18:22:23.747Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-07T18:22:23.765Z"}
{"duration":926,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-07T18:22:23.885Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-07T18:22:23.967Z"}
{"duration":181,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-07T18:22:24.069Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-07T18:22:24.208Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":3,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-07T18:22:24.348Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-07T18:22:24.486Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-07T18:22:24.691Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-07T18:22:24.825Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-07T18:22:24.965Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-07T18:22:25.097Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-07T18:38:41.371Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-07T18:38:42.382Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-07T18:38:42.400Z"}
{"duration":855,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-07T18:38:42.509Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-07T18:38:42.530Z"}
{"duration":125,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-07T18:38:42.639Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-07T18:38:42.774Z"}
{"duration":148,"level":"info","message":"DB query ejecutada","rows":2,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-07T18:38:42.922Z"}
{"duration":128,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-07T18:38:43.050Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-07T18:38:43.186Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-07T18:38:43.316Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-07T18:38:43.446Z"}
{"duration":150,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-07T18:38:43.597Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-07T18:50:29.124Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-07T18:50:30.175Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-07T18:50:30.193Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-07T18:50:30.311Z"}
{"duration":903,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-07T18:50:30.326Z"}
{"duration":151,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-07T18:50:30.481Z"}
{"duration":150,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-07T18:50:30.632Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-07T18:50:30.770Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-07T18:50:30.904Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-07T18:50:31.037Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-07T18:50:31.169Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-07T18:50:31.300Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-07T18:50:31.431Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-07T20:45:52.430Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-07T20:45:53.453Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-07T20:45:53.470Z"}
{"duration":963,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-07T20:45:53.591Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T15:13:05.925Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T15:13:07.485Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T15:13:07.487Z"}
{"duration":1281,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T15:13:07.690Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-13T15:13:07.702Z"}
{"duration":195,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T15:13:07.895Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-13T15:13:08.100Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-13T15:13:08.303Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-13T15:13:08.508Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-13T15:13:08.712Z"}
{"duration":200,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-13T15:13:08.917Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-13T15:13:09.122Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-13T15:13:09.328Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T20:51:36.319Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T20:51:37.736Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T20:51:37.738Z"}
{"duration":987,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T20:51:37.871Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T20:54:10.384Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T20:54:11.764Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T20:54:11.778Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-13T20:54:11.976Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T20:54:48.718Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T20:54:50.076Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T20:54:50.087Z"}
{"duration":1145,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T20:54:50.213Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T20:56:44.406Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T20:56:45.548Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T20:56:45.552Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-13T20:56:45.681Z"}
{"duration":937,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T20:56:45.688Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T20:56:45.832Z"}
{"duration":157,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-13T20:56:45.990Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-13T20:56:46.125Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-13T20:56:46.258Z"}
{"duration":239,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-13T20:56:46.498Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-13T20:56:46.704Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-13T20:56:46.909Z"}
{"duration":199,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-13T20:56:47.111Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T21:03:15.340Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T21:03:16.747Z"}
{"duration":1257,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T21:03:16.957Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T21:03:16.966Z"}
{"duration":192,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T21:03:17.157Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-13T21:03:17.160Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-13T21:03:17.293Z"}
{"duration":168,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-13T21:03:17.462Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-13T21:03:17.667Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-13T21:03:17.873Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-13T21:03:18.080Z"}
{"duration":199,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-13T21:03:18.282Z"}
{"duration":201,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-13T21:03:18.487Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T21:12:36.585Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T21:12:37.990Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T21:12:38.027Z"}
{"duration":1135,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T21:12:38.123Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-13T21:12:38.193Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T21:12:38.261Z"}
{"duration":162,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-13T21:12:38.425Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-13T21:12:38.631Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-13T21:12:38.835Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-13T21:12:39.041Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-13T21:12:39.179Z"}
{"duration":167,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-13T21:12:39.348Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-13T21:12:39.481Z"}
{"duration":169,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T21:12:47.747Z"}
{"duration":200,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-13T21:12:47.949Z"}
{"duration":178,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-13T21:12:48.129Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-13T21:12:48.264Z"}
{"duration":163,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T21:13:01.569Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-13T21:13:01.774Z"}
{"duration":205,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-13T21:13:01.980Z"}
{"duration":200,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-13T21:13:02.183Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T21:13:38.945Z"}
{"duration":1333,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T21:13:39.151Z"}
{"duration":201,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-13T21:13:39.354Z"}
{"duration":191,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-13T21:13:40.378Z"}
{"duration":146,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO ia_cache (query, query_hash, response, source, created_at)\n        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)\n        ON CONFLICT (query_hash) \n        DO UPDATE SET \n          response = $3,\n          source = $4,\n          created_at = CURRENT_TIMESTAMP\n      ","timestamp":"2025-03-13T21:13:42.539Z"}
{"duration":193,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T21:13:42.735Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-13T21:13:42.875Z"}
{"duration":162,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-13T21:13:43.040Z"}
{"duration":205,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-13T21:13:43.246Z"}
{"duration":147,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-13T21:13:43.397Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T21:14:16.834Z"}
{"duration":1325,"level":"info","message":"DB query ejecutada","rows":2,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T21:14:17.038Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-13T21:14:17.243Z"}
{"duration":191,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-13T21:14:17.449Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T22:00:51.130Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:00:52.191Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:00:52.195Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-13T22:00:52.324Z"}
{"duration":924,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T22:00:52.329Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T22:03:08.341Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:03:09.335Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:03:09.373Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-13T22:03:09.473Z"}
{"duration":983,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T22:03:09.508Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T22:03:09.645Z"}
{"duration":147,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-13T22:03:09.794Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":2,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-13T22:03:09.936Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-13T22:03:10.070Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-13T22:03:10.211Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-13T22:03:10.349Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-13T22:03:10.481Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-13T22:03:10.621Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:03:29.043Z"}
{"duration":144,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-13T22:03:29.878Z"}
{"duration":142,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:03:30.025Z"}
{"duration":145,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-13T22:03:30.172Z"}
{"duration":151,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:03:30.324Z"}
{"duration":142,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:03:30.469Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:10:01.325Z"}
{"duration":934,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:10:01.520Z"}
{"duration":236,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-13T22:10:01.757Z"}
{"duration":440,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:10:02.203Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T22:10:23.215Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:10:24.188Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:10:24.197Z"}
{"duration":919,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T22:10:24.323Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T22:10:40.058Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:10:41.011Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:10:41.030Z"}
{"duration":902,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T22:10:41.147Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-13T22:10:41.164Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T22:10:41.288Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-13T22:10:41.428Z"}
{"duration":141,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-13T22:10:41.570Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-13T22:10:41.703Z"}
{"duration":142,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-13T22:10:41.848Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-13T22:10:41.997Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-13T22:10:42.136Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-13T22:10:42.268Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:10:47.325Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-13T22:10:48.190Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO ia_cache (query, query_hash, response, source, created_at)\n        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)\n        ON CONFLICT (query_hash) \n        DO UPDATE SET \n          response = $3,\n          source = $4,\n          created_at = CURRENT_TIMESTAMP\n      ","timestamp":"2025-03-13T22:10:50.075Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:10:50.210Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-13T22:10:50.342Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:10:50.480Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:10:50.617Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:13:43.314Z"}
{"duration":939,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:13:43.448Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-13T22:13:44.199Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO ia_cache (query, query_hash, response, source, created_at)\n        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)\n        ON CONFLICT (query_hash) \n        DO UPDATE SET \n          response = $3,\n          source = $4,\n          created_at = CURRENT_TIMESTAMP\n      ","timestamp":"2025-03-13T22:13:45.115Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:13:45.245Z"}
{"duration":157,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-13T22:13:45.402Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:13:45.534Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:13:45.664Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:13:58.696Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-13T22:13:59.507Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO ia_cache (query, query_hash, response, source, created_at)\n        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)\n        ON CONFLICT (query_hash) \n        DO UPDATE SET \n          response = $3,\n          source = $4,\n          created_at = CURRENT_TIMESTAMP\n      ","timestamp":"2025-03-13T22:14:00.323Z"}
{"duration":145,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:14:00.469Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-13T22:14:00.600Z"}
{"duration":153,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:14:00.754Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:14:00.888Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:14:10.780Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-13T22:14:11.571Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO ia_cache (query, query_hash, response, source, created_at)\n        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)\n        ON CONFLICT (query_hash) \n        DO UPDATE SET \n          response = $3,\n          source = $4,\n          created_at = CURRENT_TIMESTAMP\n      ","timestamp":"2025-03-13T22:14:12.880Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:14:13.015Z"}
{"duration":129,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-13T22:14:13.146Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:14:13.277Z"}
{"duration":130,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:14:13.409Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T22:19:43.336Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:19:44.300Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:19:44.306Z"}
{"duration":909,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T22:19:44.433Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-13T22:19:51.014Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:19:51.940Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:19:51.958Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-13T22:19:52.073Z"}
{"duration":899,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T22:19:52.095Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-13T22:19:52.239Z"}
{"duration":139,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-13T22:19:52.379Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":4,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-13T22:19:52.517Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-13T22:19:52.651Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-13T22:19:52.788Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-13T22:19:52.925Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-13T22:19:53.061Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-13T22:19:53.198Z"}
{"duration":140,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:20:05.052Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-13T22:20:05.933Z"}
{"duration":138,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:20:06.079Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-13T22:20:06.215Z"}
{"duration":146,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:20:06.362Z"}
{"duration":175,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:20:06.541Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-13T22:20:38.006Z"}
{"duration":897,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-13T22:20:38.152Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        UPDATE knowledge_base\n        SET times_used = times_used + 1\n        WHERE id = $1;\n      ","timestamp":"2025-03-13T22:20:38.289Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-13T22:20:38.430Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-14T16:22:43.805Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-14T16:22:45.360Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-14T16:22:45.390Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-14T16:22:45.494Z"}
{"duration":1209,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-14T16:22:45.527Z"}
{"duration":233,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-14T16:22:45.771Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-14T16:22:45.976Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":16,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-14T16:22:46.181Z"}
{"duration":202,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-14T16:22:46.385Z"}
{"duration":204,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-14T16:22:46.590Z"}
{"duration":201,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-14T16:22:46.795Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-14T16:22:47.001Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-14T16:22:47.206Z"}
{"duration":180,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-14T16:23:16.185Z"}
{"duration":194,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT query, response, source, created_at\n        FROM ia_cache\n        WHERE query_hash = $1 OR query = $2\n        ORDER BY created_at DESC\n        LIMIT 1\n      ","timestamp":"2025-03-14T16:23:17.106Z"}
{"duration":158,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO ia_cache (query, query_hash, response, source, created_at)\n        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)\n        ON CONFLICT (query_hash) \n        DO UPDATE SET \n          response = $3,\n          source = $4,\n          created_at = CURRENT_TIMESTAMP\n      ","timestamp":"2025-03-14T16:23:19.297Z"}
{"duration":162,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n      WITH ranked_results AS (\n        SELECT \n          k.*,\n          SIMILARITY(k.query, $1) as similarity,\n          -- Añadir ranking adicional para coincidencias parciales\n          CASE \n            WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n            WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n            WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n            WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n            WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n            ELSE 0\n          END as match_type,\n          -- Añadir puntuación para coincidencia de palabras clave\n          (\n            SELECT COUNT(*) \n            FROM unnest(string_to_array($1, ' ')) as word \n            WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n          ) as keyword_matches\n        FROM \n          knowledge_base k\n        WHERE \n          (SIMILARITY(k.query, $1) > $2 OR \n           k.query ILIKE '%' || $1 || '%' OR\n           $1 ILIKE '%' || k.query || '%' OR\n           EXISTS (\n             SELECT 1 \n             FROM unnest(string_to_array($1, ' ')) as word \n             WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n           ))\n          AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n      )\n      SELECT * FROM ranked_results\n      ORDER BY \n        match_type DESC,        -- Priorizar tipo de coincidencia\n        similarity DESC,        -- Luego por similitud textual\n        keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n        confidence DESC,        -- Luego por confianza\n        times_used DESC         -- Finalmente por uso\n      LIMIT 10;\n    ","timestamp":"2025-03-14T16:23:19.461Z"}
{"duration":169,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        SELECT * FROM knowledge_base \n        WHERE SIMILARITY(query, $1) > 0.8\n        AND (user_id = $2 OR user_id IS NULL OR is_public = true)\n        LIMIT 1;\n      ","timestamp":"2025-03-14T16:23:19.632Z"}
{"duration":151,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO knowledge_base (\n          query, \n          response, \n          context, \n          source, \n          confidence, \n          user_id, \n          is_public\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6, $7)\n        RETURNING *;\n      ","timestamp":"2025-03-14T16:23:19.784Z"}
{"duration":185,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-14T16:23:19.974Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-15T03:00:41.628Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-15T03:00:43.184Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-15T03:00:43.187Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-15T03:00:43.321Z"}
{"duration":1107,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-15T03:00:43.323Z"}
{"duration":132,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-15T03:00:43.464Z"}
{"duration":203,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        CREATE TEMP TABLE IF NOT EXISTS system_knowledge AS\n        SELECT * FROM knowledge_base \n        WHERE source = 'system' AND is_verified = true\n      ","timestamp":"2025-03-15T03:00:43.669Z"}
{"duration":146,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM knowledge_base\n        RETURNING id\n      ","timestamp":"2025-03-15T03:00:43.817Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        INSERT INTO knowledge_base\n        SELECT * FROM system_knowledge\n      ","timestamp":"2025-03-15T03:00:43.952Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"DROP TABLE IF EXISTS system_knowledge","timestamp":"2025-03-15T03:00:44.088Z"}
{"duration":131,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-15T03:00:44.224Z"}
{"duration":146,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-15T03:00:44.372Z"}
{"duration":218,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-15T03:00:44.593Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-15T03:01:56.172Z"}
{"duration":1088,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        WITH ranked_results AS (\n          SELECT \n            k.*,\n            SIMILARITY(k.query, $1) as similarity,\n            -- Añadir ranking adicional para coincidencias parciales\n            CASE \n              WHEN LOWER(k.query) = LOWER($1) THEN 5         -- Coincidencia exacta (ignorando mayúsculas/minúsculas)\n              WHEN k.query ILIKE $1 THEN 4                   -- Coincidencia exacta (ignorando mayúsculas/minúsculas y acentos)\n              WHEN k.query ILIKE $1 || '%' THEN 3            -- Empieza con\n              WHEN k.query ILIKE '%' || $1 THEN 3            -- Termina con\n              WHEN k.query ILIKE '%' || $1 || '%' THEN 2     -- Contiene\n              ELSE 0\n            END as match_type,\n            -- Añadir puntuación para coincidencia de palabras clave\n            (\n              SELECT COUNT(*) \n              FROM unnest(string_to_array($1, ' ')) as word \n              WHERE LENGTH(word) > 2 AND k.query ILIKE '%' || word || '%'\n            ) as keyword_matches\n          FROM \n            knowledge_base k\n          WHERE \n            (SIMILARITY(k.query, $1) > $2 OR \n             k.query ILIKE '%' || $1 || '%' OR\n             $1 ILIKE '%' || k.query || '%' OR\n             EXISTS (\n               SELECT 1 \n               FROM unnest(string_to_array($1, ' ')) as word \n               WHERE LENGTH(word) > 3 AND k.query ILIKE '%' || word || '%'\n             ))\n            AND (k.user_id = $3 OR k.user_id IS NULL OR k.is_public = true)\n        )\n        SELECT * FROM ranked_results\n        ORDER BY \n          match_type DESC,        -- Priorizar tipo de coincidencia\n          similarity DESC,        -- Luego por similitud textual\n          keyword_matches DESC,   -- Luego por coincidencias de palabras clave\n          confidence DESC,        -- Luego por confianza\n          times_used DESC         -- Finalmente por uso\n        LIMIT 10;\n      ","timestamp":"2025-03-15T03:01:56.382Z"}
{"duration":197,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"\n        INSERT INTO conversation_history (\n          user_id, \n          query, \n          response, \n          knowledge_id, \n          confidence, \n          feedback\n        ) \n        VALUES ($1, $2, $3, $4, $5, $6)\n        RETURNING *;\n      ","timestamp":"2025-03-15T03:01:56.584Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-15T10:57:32.400Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-15T10:57:33.540Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-15T10:57:33.544Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-15T10:57:33.695Z"}
{"duration":1008,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-15T10:57:33.697Z"}
{"error":"syntax error at or near \"MIGRATION\"","level":"error","message":"Error al ejecutar query","service":"database-service","text":"-- Migración de base de datos para el Sistema de Asistente de Voz\r\n-- Fecha: 15 de marzo de 2024\r\n-- Versión: 1.0.0\r\n\r\n-- Habilitar extensiones necesarias\r\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\r\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\";\r\n\r\n-- Modificar tabla knowledge_base para añadir campos de IA\r\nALTER TABLE knowledge_base \r\n  ADD COLUMN IF NOT EXISTS is_ai_generated BOOLEAN DEFAULT FALSE,\r\n  ADD COLUMN IF NOT EXISTS ai_provider VARCHAR(50) DEFAULT NULL,\r\n  ADD COLUMN IF NOT EXISTS last_verified_at TIMESTAMP DEFAULT NULL;\r\n\r\n-- Actualizar índice para búsquedas de conocimiento\r\nDROP INDEX IF EXISTS knowledge_query_idx;\r\nCREATE INDEX knowledge_query_idx ON knowledge_base USING gin(query gin_trgm_ops);\r\n\r\n-- Crear tabla para seguimiento de actualizaciones de conocimiento\r\nCREATE TABLE IF NOT EXISTS knowledge_updates (\r\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\r\n  knowledge_id UUID NOT NULL REFERENCES knowledge_base(id) ON DELETE CASCADE,\r\n  previous_response TEXT NOT NULL,\r\n  new_response TEXT NOT NULL,\r\n  update_reason VARCHAR(100) NOT NULL,\r\n  source VARCHAR(50) NOT NULL,\r\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n  \r\n  CONSTRAINT knowledge_updates_knowledge_id_fk\r\n    FOREIGN KEY (knowledge_id)\r\n    REFERENCES knowledge_base(id)\r\n    ON DELETE CASCADE\r\n);\r\n\r\n-- Crear índice para las actualizaciones de conocimiento\r\nCREATE INDEX IF NOT EXISTS knowledge_updates_knowledge_id_idx \r\nON knowledge_updates(knowledge_id);\r\n\r\n-- Crear tabla de caché para IA\r\nCREATE TABLE IF NOT EXISTS ia_cache (\r\n  id SERIAL PRIMARY KEY,\r\n  query TEXT NOT NULL,\r\n  query_hash TEXT NOT NULL,\r\n  response TEXT NOT NULL,\r\n  source VARCHAR(50),\r\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n  UNIQUE(query_hash)\r\n);\r\n\r\n-- Crear índice para búsquedas rápidas en caché\r\nCREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash);\r\n\r\n-- Añadir columna de rol a la tabla de usuarios\r\nALTER TABLE users \r\n  ADD COLUMN IF NOT EXISTS role VARCHAR(20) DEFAULT 'user';\r\n\r\n-- Crear índice para búsquedas por rol\r\nCREATE INDEX IF NOT EXISTS users_role_idx ON users(role);\r\n\r\n-- Crear usuario administrador por defecto\r\nDO $$ \r\nBEGIN \r\n  IF NOT EXISTS (SELECT 1 FROM users WHERE role = 'admin' LIMIT 1) THEN \r\n    -- Contraseña temporal (debe cambiarse después del primer inicio de sesión)\r\n    -- Hash generado para la contraseña '123456'\r\n    INSERT INTO users (\r\n      username, \r\n      email, \r\n      password_hash, \r\n      role, \r\n      is_active\r\n    ) VALUES (\r\n      'admin',\r\n      'admin@sistema.local',\r\n      '$2a$10$vI8aWBnW3fID.ZQ4/zo1G.q1lRps.9cGLcZEiGDMVr5yUP1KUOYTa',\r\n      'admin',\r\n      true\r\n    );\r\n    \r\n    -- Crear preferencias por defecto para el admin\r\n    INSERT INTO user_preferences (user_id)\r\n    SELECT id FROM users WHERE username = 'admin';\r\n  END IF; \r\nEND $$;\r\n\r\n-- Asegurar columna is_ai_generated en knowledge_base\r\nALTER TABLE knowledge_base \r\n  ADD COLUMN IF NOT EXISTS is_ai_generated BOOLEAN DEFAULT false;\r\n\r\n-- Comentario final de migración\r\nCOMMENT ON MIGRATION 20240315_database_migration IS \r\n  'Añade soporte para generación de conocimiento por IA, seguimiento de actualizaciones y rol de usuario';","timestamp":"2025-03-15T10:57:33.847Z"}
{"duration":147,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-15T10:57:34.001Z"}
{"duration":133,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-15T10:57:34.135Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-15T10:57:34.272Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-15T11:00:08.812Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-15T11:00:09.812Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-15T11:00:09.830Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-15T11:00:09.950Z"}
{"duration":971,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-15T11:00:09.968Z"}
{"error":"syntax error at or near \"(\"","level":"error","message":"Error al ejecutar query","service":"database-service","text":"-- Migración de base de datos para el Sistema de Asistente de Voz\r\n-- Fecha: 15 de marzo de 2024\r\n-- Versión: 1.0.0\r\n\r\n-- Habilitar extensiones necesarias\r\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\r\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\";\r\n\r\n-- Modificar tabla knowledge_base para añadir campos de IA\r\nALTER TABLE knowledge_base \r\n  ADD COLUMN IF NOT EXISTS is_ai_generated BOOLEAN DEFAULT FALSE,\r\n  ADD COLUMN IF NOT EXISTS ai_provider VARCHAR(50) DEFAULT NULL,\r\n  ADD COLUMN IF NOT EXISTS last_verified_at TIMESTAMP DEFAULT NULL;\r\n\r\n-- Actualizar índice para búsquedas de conocimiento\r\nDROP INDEX IF EXISTS knowledge_query_idx;\r\nCREATE INDEX knowledge_query_idx ON knowledge_base USING gin(query gin_trgm_ops);\r\n\r\n-- Crear tabla para seguimiento de actualizaciones de conocimiento\r\nCREATE TABLE IF NOT EXISTS knowledge_updates (\r\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\r\n  knowledge_id UUID NOT NULL REFERENCES knowledge_base(id) ON DELETE CASCADE,\r\n  previous_response TEXT NOT NULL,\r\n  new_response TEXT NOT NULL,\r\n  update_reason VARCHAR(100) NOT NULL,\r\n  source VARCHAR(50) NOT NULL,\r\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n  \r\n  CONSTRAINT knowledge_updates_knowledge_id_fk\r\n    FOREIGN KEY (knowledge_id)\r\n    REFERENCES knowledge_base(id)\r\n    ON DELETE CASCADE\r\n);\r\n\r\n-- Crear índice para las actualizaciones de conocimiento\r\nCREATE INDEX IF NOT EXISTS knowledge_updates_knowledge_id_idx \r\nON knowledge_updates(knowledge_id);\r\n\r\n-- Crear tabla de caché para IA\r\nCREATE TABLE IF NOT EXISTS ia_cache (\r\n  id SERIAL PRIMARY KEY,\r\n  query TEXT NOT NULL,\r\n  query_hash TEXT NOT NULL,\r\n  response TEXT NOT NULL,\r\n  source VARCHAR(50),\r\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n  UNIQUE(query_hash)\r\n);\r\n\r\n-- Crear índice para búsquedas rápidas en caché\r\nCREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash);\r\n\r\n-- Añadir columna de rol a la tabla de usuarios\r\nALTER TABLE users \r\n  ADD COLUMN IF NOT EXISTS role VARCHAR(20) DEFAULT 'user';\r\n\r\n-- Crear índice para búsquedas por rol\r\nCREATE INDEX IF NOT EXISTS users_role_idx ON users(role);\r\n\r\n-- Crear usuario administrador por defecto\r\nDO $$ \r\nBEGIN \r\n  IF NOT EXISTS (SELECT 1 FROM users WHERE role = 'admin' LIMIT 1) THEN \r\n    -- Contraseña temporal (debe cambiarse después del primer inicio de sesión)\r\n    -- Hash generado para la contraseña '123456'\r\n    INSERT INTO users (\r\n      username, \r\n      email, \r\n      password_hash, \r\n      role, \r\n      is_active\r\n    ) VALUES (\r\n      'admin',\r\n      'admin@sistema.local',\r\n      '$2a$10$vI8aWBnW3fID.ZQ4/zo1G.q1lRps.9cGLcZEiGDMVr5yUP1KUOYTa',\r\n      'admin',\r\n      true\r\n    );\r\n    \r\n    -- Crear preferencias por defecto para el admin\r\n    INSERT INTO user_preferences (user_id)\r\n    SELECT id FROM users WHERE username = 'admin';\r\n  END IF; \r\nEND $$;\r\n\r\n-- Asegurar columna is_ai_generated en knowledge_base\r\nALTER TABLE knowledge_base \r\n  ADD COLUMN IF NOT EXISTS is_ai_generated BOOLEAN DEFAULT false;\r\n\r\n-- Comentario final de migración\r\nCOMMENT ON DATABASE current_database() IS 'Base de datos con soporte para generación de conocimiento por IA, seguimiento de actualizaciones y rol de usuario';","timestamp":"2025-03-15T11:00:10.110Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-15T11:00:10.251Z"}
{"duration":136,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-15T11:00:10.389Z"}
{"duration":134,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-15T11:00:10.526Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-15T11:02:05.524Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-15T11:02:06.540Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-15T11:02:06.565Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-15T11:02:06.682Z"}
{"duration":993,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-15T11:02:06.702Z"}
{"duration":278,"level":"info","message":"DB query ejecutada","service":"database-service","text":"-- Migración de base de datos para el Sistema de Asistente de Voz\r\n-- Fecha: 15 de marzo de 2024\r\n-- Versión: 1.0.0\r\n\r\n-- Habilitar extensiones necesarias\r\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\r\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\";\r\n\r\n-- Modificar tabla knowledge_base para añadir campos de IA\r\nALTER TABLE knowledge_base \r\n  ADD COLUMN IF NOT EXISTS is_ai_generated BOOLEAN DEFAULT FALSE,\r\n  ADD COLUMN IF NOT EXISTS ai_provider VARCHAR(50) DEFAULT NULL,\r\n  ADD COLUMN IF NOT EXISTS last_verified_at TIMESTAMP DEFAULT NULL;\r\n\r\n-- Actualizar índice para búsquedas de conocimiento\r\nDROP INDEX IF EXISTS knowledge_query_idx;\r\nCREATE INDEX knowledge_query_idx ON knowledge_base USING gin(query gin_trgm_ops);\r\n\r\n-- Crear tabla para seguimiento de actualizaciones de conocimiento\r\nCREATE TABLE IF NOT EXISTS knowledge_updates (\r\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\r\n  knowledge_id UUID NOT NULL REFERENCES knowledge_base(id) ON DELETE CASCADE,\r\n  previous_response TEXT NOT NULL,\r\n  new_response TEXT NOT NULL,\r\n  update_reason VARCHAR(100) NOT NULL,\r\n  source VARCHAR(50) NOT NULL,\r\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n  \r\n  CONSTRAINT knowledge_updates_knowledge_id_fk\r\n    FOREIGN KEY (knowledge_id)\r\n    REFERENCES knowledge_base(id)\r\n    ON DELETE CASCADE\r\n);\r\n\r\n-- Crear índice para las actualizaciones de conocimiento\r\nCREATE INDEX IF NOT EXISTS knowledge_updates_knowledge_id_idx \r\nON knowledge_updates(knowledge_id);\r\n\r\n-- Crear tabla de caché para IA\r\nCREATE TABLE IF NOT EXISTS ia_cache (\r\n  id SERIAL PRIMARY KEY,\r\n  query TEXT NOT NULL,\r\n  query_hash TEXT NOT NULL,\r\n  response TEXT NOT NULL,\r\n  source VARCHAR(50),\r\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n  UNIQUE(query_hash)\r\n);\r\n\r\n-- Crear índice para búsquedas rápidas en caché\r\nCREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash);\r\n\r\n-- Añadir columna de rol a la tabla de usuarios\r\nALTER TABLE users \r\n  ADD COLUMN IF NOT EXISTS role VARCHAR(20) DEFAULT 'user';\r\n\r\n-- Crear índice para búsquedas por rol\r\nCREATE INDEX IF NOT EXISTS users_role_idx ON users(role);\r\n\r\n-- Crear usuario administrador por defecto\r\nDO $$ \r\nBEGIN \r\n  IF NOT EXISTS (SELECT 1 FROM users WHERE role = 'admin' LIMIT 1) THEN \r\n    -- Contraseña temporal (debe cambiarse después del primer inicio de sesión)\r\n    -- Hash generado para la contraseña '123456'\r\n    INSERT INTO users (\r\n      username, \r\n      email, \r\n      password_hash, \r\n      role, \r\n      is_active\r\n    ) VALUES (\r\n      'admin',\r\n      'admin@sistema.local',\r\n      '$2a$10$vI8aWBnW3fID.ZQ4/zo1G.q1lRps.9cGLcZEiGDMVr5yUP1KUOYTa',\r\n      'admin',\r\n      true\r\n    );\r\n    \r\n    -- Crear preferencias por defecto para el admin\r\n    INSERT INTO user_preferences (user_id)\r\n    SELECT id FROM users WHERE username = 'admin';\r\n  END IF; \r\nEND $$;\r\n\r\n-- Asegurar columna is_ai_generated en knowledge_base\r\nALTER TABLE knowledge_base \r\n  ADD COLUMN IF NOT EXISTS is_ai_generated BOOLEAN DEFAULT false;\r\n\r\n-- Comentario final de migración\r\n--COMMENT ON DATABASE current_database() IS 'Base de datos con soporte para generación de conocimiento por IA, seguimiento de actualizaciones y rol de usuario';","timestamp":"2025-03-15T11:02:06.988Z"}
{"duration":135,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-15T11:02:07.127Z"}
{"duration":147,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-15T11:02:07.276Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-15T11:02:07.415Z"}
{"database":"asistente_inteligente_artificial","host":"dpg-cuuem61opnds73edtpj0-a.oregon-postgres.render.com","level":"info","message":"Configuración de base de datos:","port":"5432","service":"database-service","ssl":"true","timestamp":"2025-03-15T11:13:32.456Z","user":"asistente_inteligente_artificial_user"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-15T11:13:33.440Z"}
{"level":"info","message":"Nuevo cliente de base de datos conectado","service":"database-service","timestamp":"2025-03-15T11:13:33.444Z"}
{"level":"info","message":"Conexión inicial a la base de datos establecida correctamente","service":"database-service","timestamp":"2025-03-15T11:13:33.580Z"}
{"duration":945,"level":"info","message":"DB query ejecutada","rows":1,"service":"database-service","text":"SELECT NOW()","timestamp":"2025-03-15T11:13:33.593Z"}
{"duration":259,"level":"info","message":"DB query ejecutada","service":"database-service","text":"-- Migración de base de datos para el Sistema de Asistente de Voz\r\n-- Fecha: 15 de marzo de 2024\r\n-- Versión: 1.0.0\r\n\r\n-- Habilitar extensiones necesarias\r\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\r\nCREATE EXTENSION IF NOT EXISTS \"pg_trgm\";\r\n\r\n-- Modificar tabla knowledge_base para añadir campos de IA\r\nALTER TABLE knowledge_base \r\n  ADD COLUMN IF NOT EXISTS is_ai_generated BOOLEAN DEFAULT FALSE,\r\n  ADD COLUMN IF NOT EXISTS ai_provider VARCHAR(50) DEFAULT NULL,\r\n  ADD COLUMN IF NOT EXISTS last_verified_at TIMESTAMP DEFAULT NULL;\r\n\r\n-- Actualizar índice para búsquedas de conocimiento\r\nDROP INDEX IF EXISTS knowledge_query_idx;\r\nCREATE INDEX knowledge_query_idx ON knowledge_base USING gin(query gin_trgm_ops);\r\n\r\n-- Crear tabla para seguimiento de actualizaciones de conocimiento\r\nCREATE TABLE IF NOT EXISTS knowledge_updates (\r\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\r\n  knowledge_id UUID NOT NULL REFERENCES knowledge_base(id) ON DELETE CASCADE,\r\n  previous_response TEXT NOT NULL,\r\n  new_response TEXT NOT NULL,\r\n  update_reason VARCHAR(100) NOT NULL,\r\n  source VARCHAR(50) NOT NULL,\r\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n  \r\n  CONSTRAINT knowledge_updates_knowledge_id_fk\r\n    FOREIGN KEY (knowledge_id)\r\n    REFERENCES knowledge_base(id)\r\n    ON DELETE CASCADE\r\n);\r\n\r\n-- Crear índice para las actualizaciones de conocimiento\r\nCREATE INDEX IF NOT EXISTS knowledge_updates_knowledge_id_idx \r\nON knowledge_updates(knowledge_id);\r\n\r\n-- Crear tabla de caché para IA\r\nCREATE TABLE IF NOT EXISTS ia_cache (\r\n  id SERIAL PRIMARY KEY,\r\n  query TEXT NOT NULL,\r\n  query_hash TEXT NOT NULL,\r\n  response TEXT NOT NULL,\r\n  source VARCHAR(50),\r\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n  UNIQUE(query_hash)\r\n);\r\n\r\n-- Crear índice para búsquedas rápidas en caché\r\nCREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash);\r\n\r\n-- Añadir columna de rol a la tabla de usuarios\r\nALTER TABLE users \r\n  ADD COLUMN IF NOT EXISTS role VARCHAR(20) DEFAULT 'user';\r\n\r\n-- Crear índice para búsquedas por rol\r\nCREATE INDEX IF NOT EXISTS users_role_idx ON users(role);\r\n\r\n-- Crear usuario administrador por defecto\r\nDO $$ \r\nBEGIN \r\n  IF NOT EXISTS (SELECT 1 FROM users WHERE role = 'admin' LIMIT 1) THEN \r\n    -- Contraseña temporal (debe cambiarse después del primer inicio de sesión)\r\n    -- Hash generado para la contraseña '123456'\r\n    INSERT INTO users (\r\n      username, \r\n      email, \r\n      password_hash, \r\n      role, \r\n      is_active\r\n    ) VALUES (\r\n      'admin',\r\n      'admin@sistema.local',\r\n      '$2a$10$vI8aWBnW3fID.ZQ4/zo1G.q1lRps.9cGLcZEiGDMVr5yUP1KUOYTa',\r\n      'admin',\r\n      true\r\n    );\r\n    \r\n    -- Crear preferencias por defecto para el admin\r\n    INSERT INTO user_preferences (user_id)\r\n    SELECT id FROM users WHERE username = 'admin';\r\n  END IF; \r\nEND $$;\r\n\r\n-- Asegurar columna is_ai_generated en knowledge_base\r\nALTER TABLE knowledge_base \r\n  ADD COLUMN IF NOT EXISTS is_ai_generated BOOLEAN DEFAULT false;\r\n\r\n-- Comentario final de migración\r\n--COMMENT ON DATABASE current_database() IS 'Base de datos con soporte para generación de conocimiento por IA, seguimiento de actualizaciones y rol de usuario';","timestamp":"2025-03-15T11:13:33.861Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE TABLE IF NOT EXISTS ia_cache (\n          id SERIAL PRIMARY KEY,\n          query TEXT NOT NULL,\n          query_hash TEXT NOT NULL,\n          response TEXT NOT NULL,\n          source VARCHAR(50),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          UNIQUE(query_hash)\n        )\n      ","timestamp":"2025-03-15T11:13:34.004Z"}
{"duration":137,"level":"info","message":"DB query ejecutada","rows":null,"service":"database-service","text":"\n        CREATE INDEX IF NOT EXISTS query_hash_idx ON ia_cache(query_hash)\n      ","timestamp":"2025-03-15T11:13:34.143Z"}
{"duration":158,"level":"info","message":"DB query ejecutada","rows":0,"service":"database-service","text":"\n        DELETE FROM ia_cache\n        WHERE created_at < NOW() - INTERVAL '30 days'\n        RETURNING id\n      ","timestamp":"2025-03-15T11:13:34.303Z"}
